



local target_aim = {
    Aiming = {
        Target = {
            Enabled = nil,
            Key = Enum.KeyCode.Q,
            Prediction = nil,
            Prediction2 = nil,
            Radius = nil,
            TargetPart = "Head",
            Alerts = nil,
            JumpOffset = nil,
            TargetStats = nil,
            LookAt = nil
        }
    }
}

local players = game:GetService("Players")
local uis = game:GetService("UserInputService")
local runservice = game:GetService("RunService")
local tweenservice = game:GetService("TweenService")
local marketplaceservice = game:GetService("MarketplaceService")
local textservice = game:GetService("TextService")
local coregui = game:GetService("CoreGui")
local httpservice = game:GetService("HttpService")

local player = players.LocalPlayer
local mouse = player:GetMouse()
local camera = game.Workspace.CurrentCamera

local NotifyLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))()
local Notify = NotifyLibrary.Notify
loadstring(game:HttpGet("https://pastebin.com/raw/Fghbzbbj"))()
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/querryinn/uiui/main/slixs"))({cheatname = "SILLYSILLYSILLYSILLY.fun (m0dular)", gamename = "da hood"})
library:init()
local Window =
    library.NewWindow({title = library.cheatname .. " | " .. library.gamename, size = UDim2.new(0, 450, 0, 600)})


local AimingTab = Window:AddTab("main")
local VisualTab = Window:AddTab("visuals")
local MiscTab = Window:AddTab("misc")
local SettingTab = library:CreateSettingsTab(Window)


local TargetSection = AimingTab:AddSection("fireserver spoof", 1)
local AimbotSection = AimingTab:AddSection("camera offset", 2)
local Resolve = AimingTab:AddSection("resolve bot", 2)
local Raging = MiscTab:AddSection("utilities", 1)
local AntiAim = MiscTab:AddSection("v-sync", 2)
local Csync = MiscTab:AddSection("c-sync", 2)
local Hsync = MiscTab:AddSection("h-sync", 2)
local World = VisualTab:AddSection("world visuals", 1)
local WorldSetting = VisualTab:AddSection("world settings", 2)
local Esp = VisualTab:AddSection("wallhack visuals", 1)



AntiAim:AddToggle(
    {
        text = "enabled",
        flag = "2001612",
        callback = function(state)
            aaenabled = state
        end
    }
)

AntiAim:AddList(
    {
        text = "method",
        flag = "200135",
        values = {"custom", "disable prediction", "overworld", "underworld", "air orthodox", "prediction multiplier"},
        callback = function(val)
            aamodex = val
        end
    }
)

AntiAim:AddSeparator({text = "settings"})

AntiAim:AddSlider(
    {
        text = "custom x",
        flag = "203240164",
        suffix = "",
        min = -10000,
        max = 10000,
        increment = 1,
        callback = function(value)
            x_val = value
        end
    }
)   

AntiAim:AddSlider(
    {
        text = "custom y",
        flag = "123402052",
        suffix = "",
        min = -10000,
        max = 10000,
        increment = 1,
        callback = function(value)
            y_val = value
        end
    }
)    

AntiAim:AddSlider(
    {
        text = "custom z",
        flag = "69915",
        suffix = "",
        min = -10000,
        max = 10000,
        increment = 1,
        callback = function(value)
            z_val = value
        end
    }
)    

AntiAim:AddSlider(
    {
        text = "prediction changer",
        flag = "125063",
        suffix = "",
        min = -20,
        max = 20,
        increment = 1,
        callback = function(value)
            Custom123 = value
        end
    }
)  


AntiAim:AddSlider(
    {
        text = "desync angles",
        flag = "1999753",
        suffix = "",
        min = -1000,
        max = 1000,
        increment = 1,
        callback = function(value)
            DesyncAngles = value
        end
    }
)  

AntiAim:AddSeparator({text = "predictor"})

AntiAim:AddButton(
    {
        text = "predictor",
        flag = "124683",
        callback = function(value)
            library:SendNotification("2.0 m0dular | successfully executed predictor", 2)
            local Prediction = .18
            getgenv().velocityshower = false

            local RunService = game:GetService("RunService")
            local PlayersService = game:GetService("Players")
            local LocalPlayer = PlayersService.LocalPlayer
            local Mouse = LocalPlayer:GetMouse()
            
            Drawing = Drawing
            
            local Draw = Drawing.new
            local Square = Drawing.new("Circle")
            Square.Visible = true
            Square.Filled = true
            Square.Thickness = 1
            Square.Transparency = 1
            Square.Color = Color3.new(0.65, 0.65, 1)
            Square.Radius = 5
            
            function ShowVelocityOf(User)
                local Camera = game:GetService("Workspace").CurrentCamera
                local Vector, OnScreen = Camera:WorldToViewportPoint(User.Character:FindFirstChild("HumanoidRootPart").Position + (User.Character:FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity * Prediction))
                if OnScreen then
                    Square.Radius = 5
                    Square.Position = Vector2.new(Vector.X,Vector.Y)
                else
                    Square.Radius = 0
                end
            end
            
            local Stapel = nil
            Stapel = RunService.Heartbeat:Connect(function()
                pcall(function()
                    if getgenv().velocityshower == true then
                        ShowVelocityOf(LocalPlayer)
                    Square.Visible = true
                    elseif getgenv().velocityshower == false then
                    Square.Visible = false
                    end
                end)
            end)
        end
    }
) 

AntiAim:AddToggle(
    {
        text = "show velocity location",
        flag = "382359",
        callback = function(state)
        getgenv().velocityshower = state
        end
    }
)

Csync:AddSeparator({text = "angles"})

Csync:AddToggle(
    {
        text = "upside down",
        flag = "2001612",
        callback = function(state)
            getgenv().UpsideDown = state
        end
    }
)

getgenv().UpsideDown = false
game:GetService("RunService").heartbeat:Connect(function()
if getgenv().UpsideDown then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(math.rad(0), math.rad(0), math.rad(-180))
* CFrame.Angles(math.rad(0), math.rad(1), math.rad(0))
game:GetService("RunService").RenderStepped:Wait()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(math.rad(0), math.rad(0), math.rad(-180))
* CFrame.Angles(math.rad(0), math.rad(1), math.rad(0))
end
end)

Hsync:AddSeparator({text = "networking"})

Hsync:AddToggle(
    {
        text = "replication lag",
        flag = "325235235",
        callback = function(state)
            getgenv().enabledfakelagging = state
            
            if getgenv().enabledfakelagging == true then
                library:SendNotification("2.0 m0dular | keybind is (Z)", 1)
            end
        end
    }
)


getgenv().enabledfakelagging = false
getgenv().zzz = "z"
getgenv().moose = game.Players.LocalPlayer:GetMouse()
getgenv().itch = false
moose.KeyUp:connect(function(key)
if key == zzz then
if itch == false and getgenv().enabledfakelagging == true then
   getgenv().itch = true
settings():GetService("NetworkSettings").IncomingReplicationLag = 10000
library:SendNotification("2.0 m0dular | replication lag at (1000)", 1)
elseif itch == true and getgenv().enabledfakelagging == true then
getgenv().itch = false
settings():GetService("NetworkSettings").IncomingReplicationLag = 0
library:SendNotification("2.0 m0dular | replication lag at (0)", 1)
end
end
end)







     



local heartbeat = game:GetService("RunService").Heartbeat
local renderstepped = game:GetService("RunService").RenderStepped
local stepped = game:GetService("RunService").Stepped
local v3 = Vector3.new
local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
local lp = game.Players.LocalPlayer

spawn(function()
    local hrp, c, vel, movel = nil, nil, nil, 0.1
    c = lp.Character
    hrp = lp.Character.HumanoidRootPart
    while true do
        heartbeat:Wait()
        while aaenabled and not (c and c.Parent and hrp and hrp.Parent) do
            heartbeat:Wait()
            c = lp.Character
            hrp = lp.Character.HumanoidRootPart
        end
        if aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "custom" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(x_val,y_val,z_val)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "disable prediction" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(-0,-0,-0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "overworld" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(-0,10000000000000000000,-0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "underworld" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(-0,-10000000000000000000,-0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
            elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "air orthodox" then
            vel = hrp.Velocity
            hrp.Velocity = vel*1+v3(77,77,77)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
            elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "prediction multiplier" then
                vel = hrp.Velocity
                hrp.Velocity = vel*7+v3(0,0,0)
                renderstepped:Wait()
                hrp.Velocity = vel
                stepped:Wait()
                if c and c.Parent and hrp and hrp.Parent then
                    hrp.Velocity = vel + v3(0, movel, 0)
                    movel = movel * -1
                end
            end
        end
    end)


TargetSection:AddToggle(
    {
        text = "enabled",
        flag = "23412311",
        callback = function(state)
        target_aim.Aiming.Target.Enabled = state
   end
    }
)



TargetSection:AddSlider(
    {
        text = "prediction",
        flag = "23412423",
        suffix = "",
        min = 0,
        max = 0.2,
        increment = .0001,
        callback = function(value)
            target_aim.Aiming.Target.Prediction = value
            target_aim.Aiming.Target.Prediction2 = value
        end
    }
)

TargetSection:AddList(
    {
        text = "hit part",
        flag = "4234212",
        values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"},
        callback = function(val)
            hit_partxd = val
        end
    }
)

TargetSection:AddSeparator({text = "settings"})
        
TargetSection:AddSlider(
    {
        text = "jump offset",
        flag = "242423",
        suffix = "",
        min = -3,
        max = 3,
        increment = .01,
        callback = function(value)
            OriginalOffsetXDZX = value
        end
    }
)     

spawn(function()
    runservice.Stepped:Connect(function()
        if VmtHookingTrgET.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            target_aim.Aiming.Target.JumpOffset = OriginalOffsetXDZX
        else
            target_aim.Aiming.Target.JumpOffset = 0
        end
    end)
end)


TargetSection:AddToggle(
    {
        text = "randomize hit-part",
        flag = "1234234234",
        callback = function(state)
            randomizatxionxd = state
   end
    }
)

TargetSection:AddToggle(
    {
        text = "notifications",
        flag = "13334234",
        callback = function(state)
            target_aim.Aiming.Target.Alerts = state
   end
    }
)

TargetSection:AddToggle(
    {
        text = "look at",
        flag = "1661",
        callback = function(state)
            target_aim.Aiming.Target.LookAt = state
   end
    }
)

TargetSection:AddToggle(
    {
        text = "view at",
        flag = "2663",
        callback = function(state)
            viewatxd = state
   end
    }
)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and viewatxd and TargetAimEnabled then
            workspace.CurrentCamera.CameraSubject = VmtHookingTrgET.Character.Humanoid
            spawn(function()
                if viewatxd == false then
                    workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
                end
            end)
        else
            workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
        end
    end)
end)

TargetSection:AddSeparator({text = "visual"})

local dotcolorz = TargetSection:AddToggle(
    {
        text = "dot",
        flag = "2112",
        callback = function(state)
            dotenabledlol = state
   end
    }
)

TargetSection:AddToggle(
    {
        text = "cursor dot",
        flag = "2991",
        callback = function(state)
            dotoncursorx = state
   end
    }
)

local highlightcolor = TargetSection:AddToggle(
    {
        text = "broken highlight",
        flag = "1158",
        callback = function(state)
            hightlightendalbed = state
   end
    }
)

highlightcolor:AddColor(
    {
        flag = "1007",
        callback = function(color)
            fillcolorxd = color
        end
    }
)

highlightcolor:AddColor(
    {
        flag = "1008",
        callback = function(color)
            outlinecolorxdxdxd = color
        end
    }
)

TargetSection:AddToggle(
    {
        text = "stats",
        flag = "21157",
        callback = function(state)
            target_aim.Aiming.Target.TargetStats = state
   end
    }
)




                        
    
        
        

AimbotSection:AddToggle(
    {
        text = "enabled",
        flag = "1",
        callback = function(state)
            aimbotenab = state
   end
    }
)






AimbotSection:AddList(
    {
        text = "hit-part",
        flag = "2",
        values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"},
        callback = function(val)
            aimbotpartxd = val
            getgenv().aimbotpartup = val
        end
    }
)



AimbotSection:AddToggle(
    {
        text = "shake remake",
        flag = "33242111",
        callback = function(state)
            getgenv().shakebot = state
        end
    }
)

spawn(function()
    runservice.Stepped:Connect(function()
        if getgenv().shakebot then
            wait(0.6)
            player_gayparts = {"Head","UpperTorso","LowerTorso","HumanoidRootPart"}
            aimbotpartxd = player_gayparts[math.random(1,#player_gayparts)]
        else
            aimbotpartxd = getgenv().aimbotpartup
        end
    end)
end)



AimbotSection:AddToggle(
    {
        text = "smoothing",
        flag = "3",
        callback = function(state)
            SmoothingEnabLOLL = state
        end
    }
)

AimbotSection:AddSlider(
    {
        text = "smoothness value",
        flag = "4",
        suffix = "",
        min = 0,
        max = .5,
        increment = .001,
        callback = function(value)
            SmoothingValIg = value
        end
    }
)

AimbotSection:AddSlider(
    {
        text = "prediction",
        flag = "3251432",
        suffix = "",
        min = 0,
        max = 15,
        increment = 1,
        callback = function(value)
            aimbotprediction = value
        end
    }
)




Resolve:AddSlider(
    {
        text = "hitter -Y angle",
        flag = "4",
        suffix = "",
        min = 0,
        max = .5,
        increment = .001,
        callback = function(value)
            Y = value
        end
        
    }
)
  Resolve:AddBox(
    {
        text = "hitter user",
        flag = "28",
        default = "asd",
        callback = function(value)
    getgenv().targetnameenigger = value
        end

    }
)  
Resolve:AddSlider(
    {
        text = "hitter predicting",
        flag = "4",
        suffix = "",
        min = 0,
        max = .5,
        increment = .001,
        callback = function(value)
            PredictionVelocity = value
        end
        
    }
)
Raging:AddSeparator({text = "movement speed"})


Raging:AddToggle(
    {
        text = "enable speed",
        flag = "30",
        callback = function(value)
            for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                if v:IsA("Script") and v.Name ~= "Health" and v.Name ~= "Sound" and v:FindFirstChild("LocalScript") then
                    v:Destroy()
                end
            end
            game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
                repeat
                    wait()
                until game.Players.LocalPlayer.Character
                char.ChildAdded:Connect(function(child)
                    if child:IsA("Script") then 
                        wait(0.1)
                        if child:FindFirstChild("LocalScript") then
                            child.LocalScript:FireServer()
                        end
                    end
                end)
            end)
            getgenv().cframespeedtoggle = value
getgenv().speedvalue = nil
getgenv().cframekey = nil
function onKeyPress(inputObject, gameProcessedEvent)
    if inputObject.KeyCode == getgenv().cframekey and gameProcessedEvent == false then
        if cframespeedtoggle == false then
            cframespeedtoggle = true
        elseif cframespeedtoggle == true then
            cframespeedtoggle = false
        end
    end
end

game:GetService("UserInputService").InputBegan:connect(onKeyPress)

game:GetService("RunService").Heartbeat:Connect(
    function()
        if cframespeedtoggle == true then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame +
                game.Players.LocalPlayer.Character.Humanoid.MoveDirection * speedvalue
        end
    end
)
            end
    }
    
)  
Raging:AddSlider(
    {
        text = "speed value",
        flag = "4",
        suffix = "",
        min = 0,
        max = .5,
        increment = .001,
        callback = function(value)
            getgenv().speedvalue = value
        end
        
    }
)

Raging:AddSeparator({text = "useful"})

Raging:AddToggle(
    {
        text = "anti fling",
        flag = "382359",
        callback = function(state)
            game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = state
        end
    }
)

Raging:AddToggle(
    {
        text = "disabled jump cooldown",
        flag = "382359",
        callback = function(state)
            nn_nojumpcooldown = state
        end
    }
)

Raging:AddButton(
    {
        text = "force reset",
        flag = "22342342348",
        callback = function(value)
            library:SendNotification("2.0 m0dular | resetted.", 1)
            for _,parts in pairs(player.Character:GetChildren()) do
                if parts:IsA("BasePart") then
                    parts:Destroy()
                end
            end
        end
    }
)  

spawn(function()
    runservice.Heartbeat:Connect(function()
        if nn_nojumpcooldown then
            player.Character.Humanoid.UseJumpPower = false
        else
            player.Character.Humanoid.UseJumpPower = true
        end
    end)
end)



World:AddColor(
    {
        text = "fog #ff",
        flag = "9",
        callback = function(color)
          game.Lighting.FogColor = color
        end
    }
)

WorldSetting:AddSlider(
     {
         text = "fog value",
         flag = "6",
         suffix = "",
         min = 1,
         max = 10000,
         increment = .1,
         callback = function(value)
          game.Lighting.FogEnd = value
         end
     }
 )



Esp:AddToggle(
    {
        text = "boxes",
        flag = "300",
        callback = function(value)

getgenv().PikaESPSettings.Box = value
        end
    }
)
Esp:AddToggle(
    {
        text = "names",
        flag = "300",
        callback = function(value)
getgenv().PikaESPSettings.Name = value

        end
    }
)
Esp:AddToggle(
    {
        text = "tracers",
        flag = "300",
        callback = function(value)
getgenv().PikaESPSettings.Tracers = state

        end
    }
)
Esp:AddToggle(
    {
        text = "wall check",
        flag = "300",
        callback = function(value)
     getgenv().PikaESPSettings.VisibleOnly = value

        end
    }
)
Esp:AddSlider(
    {
        text = "text size",
        flag = "4",
        suffix = "",
        min = 0,
        max = 40,
        increment = .001,
        callback = function(value)
            getgenv().PikaESPSettings.TextSize = value
        end
    }
)

local dotDrawing = Drawing.new("Circle")

spawn(function()
    dotDrawing.Filled = true
    dotDrawing.Visible = false
    dotDrawing.Thickness = 2
    dotDrawing.Radius =	7
    dotDrawing.NumSides = 60
end)

local DotParent = Instance.new("Part",game.Workspace)
local newBillboard = Instance.new("BillboardGui", DotParent)

local newFrame = Instance.new("Frame", newBillboard)
local newUiCornor = Instance.new("UICorner", newFrame)

task.spawn(function ()
    newBillboard.Name = "vmt_billboarddot"
    newBillboard.Adornee = DotParent
    newBillboard.Size = UDim2.new(0.6, 0, 0.6, 0)
    newBillboard.AlwaysOnTop = true
    newFrame.Size = UDim2.new(1, 0, 1, 0)
    newFrame.BackgroundTransparency = 0
    newUiCornor.CornerRadius = UDim.new(50, 50)
    DotParent.CanCollide = false
    DotParent.Anchored = true
    DotParent.CFrame = CFrame.new(0,2000,0)
    DotParent.Transparency = 1
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and dotenabledlol then
            dotDrawing.Color = Color3.fromRGB(75,0,130)
            newFrame.BackgroundColor3 = Color3.fromRGB(75,0,130)
            if TargetAimEnabled and dotenabledlol then
                DotParent.CFrame = CFrame.new(VmtHookingTrgET.Character[target_aim.Aiming.Target.TargetPart].Position+Vector3.new(0,target_aim.Aiming.Target.JumpOffset,0)+(VmtHookingTrgET.Character[target_aim.Aiming.Target.TargetPart].Velocity*target_aim.Aiming.Target.Prediction))
                dotDrawing.Visible = false
            else
                DotParent.CFrame = CFrame.new(0,9999,0)
                if dotoncursorx then
                    dotDrawing.Visible = true
                    dotDrawing.Position = Vector2.new(mouse.X,mouse.Y + game:GetService("GuiService"):GetGuiInset().Y)
                    spawn(function()
                        if dotoncursorx == false then
                            dotDrawing.Visible = false
                        end
                    end)
                end
                spawn(function()
                    if dotoncursorx == false then
                        dotDrawing.Visible = false
                    end
                end)
            end
        else
            DotParent.CFrame = CFrame.new(0,9999,0)
            dotDrawing.Visible = false
        end
    end)
end)


spawn(function()
    runservice.Stepped:Connect(function()
        if randomizatxionxd then
            wait(0.6)
            player_gayparts = {"Head","UpperTorso","LowerTorso","HumanoidRootPart","RightUpperLeg","RightLowerLeg","LeftUpperLeg","LeftLowerLeg","RightUpperArm","RightLowerArm","LeftLowerArm","LeftUpperArm"}
            target_aim.Aiming.Target.TargetPart = player_gayparts[math.random(1,#player_gayparts)]
        else
            target_aim.Aiming.Target.TargetPart = hit_partxd
        end
    end)
end)

spawn(function()
    runservice.RenderStepped:Connect(function()
        if AimbotBindEnabled and aimbotenab and SmoothingEnabLOLL == false then
            local main_cframe = CFrame.new(workspace.CurrentCamera.CFrame.p, vmtHookingAimbTO.Character[aimbotpartxd].Position + vmtHookingAimbTO.Character[aimbotpartxd].Velocity/aimbotprediction)
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(main_cframe, 1, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
        elseif AimbotBindEnabled and aimbotenab and SmoothingEnabLOLL == true then
            local main_cframe = CFrame.new(workspace.CurrentCamera.CFrame.p, vmtHookingAimbTO.Character[aimbotpartxd].Position + vmtHookingAimbTO.Character[aimbotpartxd].Velocity/aimbotprediction)
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(main_cframe, SmoothingValIg, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
        end
    end)
end)

spawn(function()
    uis.InputBegan:Connect(function (input)
        if input.KeyCode == Enum.KeyCode.C then
            AimbotBindEnabled = not AimbotBindEnabled   
            if AimbotBindEnabled then
                vmtHookingAimbTO = targetchosen()
            end
        end 
    end)
end)

spawn(function()
    runservice.RenderStepped:Connect(function()
        if TargetAimEnabled and target_aim.Aiming.Target.Enabled and VmtHookingTrgET.Character:FindFirstChild("UpperTorso") then
            if target_aim.Aiming.Target.LookAt then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.CFrame.Position, Vector3.new(VmtHookingTrgET.Character.HumanoidRootPart.CFrame.X, player.Character.HumanoidRootPart.CFrame.Position.Y, VmtHookingTrgET.Character.HumanoidRootPart.CFrame.Z))
                player.Character.Humanoid.AutoRotate = false
                spawn(function ()
                    if target_aim.Aiming.Target.LookAt == false then
                        player.Character.Humanoid.AutoRotate = true
                    end
                end)
            end
        else
            spawn(function()
                player.Character.Humanoid.AutoRotate = true
            end)
        end
    end)
end)

spawn(function()
    uis.InputBegan:Connect(function (input)
        if input.KeyCode == target_aim.Aiming.Target.Key and target_aim.Aiming.Target.Enabled then
            TargetAimEnabled = not TargetAimEnabled   
            if TargetAimEnabled then
                VmtHookingTrgET = targetchosen()
                if target_aim.Aiming.Target.Alerts then
                    library:SendNotification("2.0 m0dular | > "  ..tostring(VmtHookingTrgET.Character.Humanoid.DisplayName), 1)
                end
            elseif not TargetAimEnabled then
                if target_aim.Aiming.Target.Alerts then
                    library:SendNotification("2.0 m0dular | unlocked", 1)
                end
            end
        end
    end)
end)

local mt = getrawmetatable(game)
local old = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(...)
    local args = {...}
    if target_aim.Aiming.Target.Enabled and TargetAimEnabled and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" then
        args[3] = VmtHookingTrgET.Character[target_aim.Aiming.Target.TargetPart].Position+Vector3.new(0.01,target_aim.Aiming.Target.JumpOffset,0.01)+(VmtHookingTrgET.Character[target_aim.Aiming.Target.TargetPart].Velocity*target_aim.Aiming.Target.Prediction)
        return old(unpack(args))
    end
    return old(...)
end)

local vmt_TargetStats = Instance.new("ScreenGui")
local Background = Instance.new("Frame")
local Picture = Instance.new("ImageLabel")
local Top = Instance.new("Frame")
local UIGradient = Instance.new("UIGradient")
local UIGradient_2 = Instance.new("UIGradient")
local HealthBarBackground = Instance.new("Frame")
local UIGradient_3 = Instance.new("UIGradient")
local HealthBar = Instance.new("Frame")
local UIGradient_4 = Instance.new("UIGradient")
local NameOfTarget = Instance.new("TextLabel")

spawn(function()
vmt_TargetStats.Name = "vmt_TargetStats"
vmt_TargetStats.Parent = game.CoreGui
vmt_TargetStats.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Background.Name = "Background"
Background.Parent = vmt_TargetStats
Background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Background.BorderSizePixel = 0
Background.Position = UDim2.new(0.388957828, 0, 0.700122297, 0)
Background.Size = UDim2.new(0, 358, 0, 71)
Background.Visible = false

Picture.Name = "Picture"
Picture.Parent = Background
Picture.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Picture.BorderSizePixel = 0
Picture.Position = UDim2.new(0.0279329624, 0, 0.0704225376, 0)
Picture.Size = UDim2.new(0, 59, 0, 59)
Picture.Transparency = 1
Picture.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"

Top.Name = "Top"
Top.Parent = Background
Top.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Top.BorderSizePixel = 0
Top.Position = UDim2.new(0, 0, -0.102452132, 0)
Top.Size = UDim2.new(0, 358, 0, 2)

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(204, 238, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(51, 187, 255))}
UIGradient.Rotation = 90
UIGradient.Parent = Top

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(52, 52, 52)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient_2.Rotation = 90
UIGradient_2.Parent = Background

HealthBarBackground.Name = "HealthBarBackground"
HealthBarBackground.Parent = Background
HealthBarBackground.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HealthBarBackground.BorderSizePixel = 0
HealthBarBackground.Position = UDim2.new(0.215083793, 0, 0.348234326, 0)
HealthBarBackground.Size = UDim2.new(0, 270, 0, 19)
HealthBarBackground.Transparency = 1

UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(58, 58, 58)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(30, 30, 30))}
UIGradient_3.Rotation = 90
UIGradient_3.Parent = HealthBarBackground

HealthBar.Name = "HealthBar"
HealthBar.Parent = HealthBarBackground
HealthBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HealthBar.BorderSizePixel = 0
HealthBar.Position = UDim2.new(-0.00336122862, 0, 0.164894029, 0)
HealthBar.Size = UDim2.new(0, 130, 0, 19)

UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(204, 238, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(51, 187, 255))}
UIGradient_4.Rotation = 90
UIGradient_4.Parent = HealthBar

NameOfTarget.Name = "NameOfTarget"
NameOfTarget.Parent = Background
NameOfTarget.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
NameOfTarget.BackgroundTransparency = 1.000
NameOfTarget.Position = UDim2.new(0.220670387, 0, 0.0704225376, 0)
NameOfTarget.Size = UDim2.new(0, 268, 0, 19)
NameOfTarget.Font = Enum.Font.Code
NameOfTarget.TextColor3 = Color3.fromRGB(255, 255, 255)
NameOfTarget.TextScaled = true
NameOfTarget.TextSize = 14.000
NameOfTarget.TextStrokeTransparency = 0.000
NameOfTarget.TextWrapped = true
end)

local IsAlive = function(GetPlayer)
    return GetPlayer and GetPlayer.Character and GetPlayer.Character:FindFirstChild("HumanoidRootPart") ~= nil and GetPlayer.Character:FindFirstChild("Humanoid") ~= nil and GetPlayer.Character:FindFirstChild("Head") ~= nil and true or false
end

spawn(function()
    while wait() do
        if target_aim.Aiming.Target.TargetStats and target_aim.Aiming.Target.Enabled and TargetAimEnabled then
            if VmtHookingTrgET and IsAlive(VmtHookingTrgET) then
                Background.Visible = true
                NameOfTarget.Text = tostring(VmtHookingTrgET.Character.Humanoid.DisplayName).." ["..tostring(VmtHookingTrgET.Name).."]"
                Picture.Image  = "rbxthumb://type=AvatarHeadShot&id=" ..VmtHookingTrgET.UserId.. "&w=420&h=420"
                HealthBar:TweenSize(UDim2.new(VmtHookingTrgET.Character.Humanoid.Health / VmtHookingTrgET.Character.Humanoid.MaxHealth, 0, 1, 0), "In", "Linear", 0.25)
                spawn(function()
                    if target_aim.Aiming.Target.TargetStats == false then
                        Background.Visible = false
                    end
                end)
            end
        else
            Background.Visible = false
        end
    end
end)


function targetchosen()
    local distance = math.huge
    local zclosest
    local LocalPlayer = game.Players.LocalPlayer
    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos = workspace.CurrentCamera:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(LocalPlayer:GetMouse().X, LocalPlayer:GetMouse().Y)).magnitude
            if magnitude < distance then
                zclosest = v
                distance = magnitude
            end
        end
    end
    return zclosest
end
